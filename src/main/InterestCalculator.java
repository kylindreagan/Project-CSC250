/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
package main;
/**
 *
 * @author Alyssa
 */


public class InterestCalculator extends javax.swing.JFrame {

    /**
     * Creates new form InterestCalculator
     */
    public InterestCalculator() {
        initComponents();
        myInitComponents();
        
    }
    
    private void scaleImage(){
        //Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //pack();
        Dimension actualSize = getContentPane().getSize();
        jLabel1.setPreferredSize(actualSize);
        
        ImageIcon icon = new ImageIcon(getClass().getResource("NoText.png"));
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(actualSize.width, actualSize.height, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        jLabel1.setIcon(scaledIcon);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mainLabel = new javax.swing.JLabel();
        initInvestLabel = new javax.swing.JLabel();
        annualContrLabel = new javax.swing.JLabel();
        monthlyContrLabel = new javax.swing.JLabel();
        beginButton = new javax.swing.JRadioButton();
        endButton = new javax.swing.JRadioButton();
        IRLabel = new javax.swing.JLabel();
        compoundLabel = new javax.swing.JLabel();
        investLenLabel = new javax.swing.JLabel();
        calcButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        midLabel1 = new javax.swing.JLabel();
        midLebel2 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        resultsLabel = new javax.swing.JLabel();
        endBalanceLabel = new javax.swing.JLabel();
        totalPrinLabel = new javax.swing.JLabel();
        totalContrLabel = new javax.swing.JLabel();
        totalInterestLabel = new javax.swing.JLabel();
        interestOfInitLabel = new javax.swing.JLabel();
        interestOfContrLabel = new javax.swing.JLabel();
        initInvestField = new javax.swing.JTextField();
        annualContrField = new javax.swing.JTextField();
        monthlyContrField = new javax.swing.JTextField();
        IRField = new javax.swing.JTextField();
        investLenYField = new javax.swing.JTextField();
        investLenMField = new javax.swing.JTextField();
        yearsLabel = new javax.swing.JLabel();
        monthsLabel = new javax.swing.JLabel();
        compoundBox = new javax.swing.JComboBox<>();
        endBalanceLabel1 = new javax.swing.JLabel();
        totalPrinLabel1 = new javax.swing.JLabel();
        totalContrLabel1 = new javax.swing.JLabel();
        totalInterestLabel1 = new javax.swing.JLabel();
        interestOfInitLabel1 = new javax.swing.JLabel();
        interestOfContrLabel1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(10, 55, 78));
        setFont(new java.awt.Font("Nunito", 0, 18)); // NOI18N
        setSize(new java.awt.Dimension(1156, 630));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainLabel.setFont(new java.awt.Font("Nunito", 1, 36)); // NOI18N
        mainLabel.setForeground(new java.awt.Color(238, 239, 239));
        mainLabel.setText("Interest Calculator");
        getContentPane().add(mainLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        initInvestLabel.setFont(getFont());
        initInvestLabel.setForeground(new java.awt.Color(27, 45, 74));
        initInvestLabel.setText("Initial investment");
        getContentPane().add(initInvestLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, -1, -1));

        annualContrLabel.setFont(getFont());
        annualContrLabel.setForeground(new java.awt.Color(27, 45, 74));
        annualContrLabel.setText("Annual contribution");
        getContentPane().add(annualContrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, -1, -1));

        monthlyContrLabel.setFont(getFont());
        monthlyContrLabel.setForeground(new java.awt.Color(27, 45, 74));
        monthlyContrLabel.setText("Monthly contribution");
        getContentPane().add(monthlyContrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, -1, -1));

        buttonGroup1.add(beginButton);
        beginButton.setFont(getFont());
        beginButton.setForeground(new java.awt.Color(27, 45, 74));
        beginButton.setSelected(true);
        beginButton.setText("beginning");
        beginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginButtonActionPerformed(evt);
            }
        });
        getContentPane().add(beginButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, -1, -1));

        buttonGroup1.add(endButton);
        endButton.setFont(getFont());
        endButton.setForeground(new java.awt.Color(27, 45, 74));
        endButton.setText("end");
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });
        getContentPane().add(endButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 270, -1, -1));

        IRLabel.setFont(getFont());
        IRLabel.setForeground(new java.awt.Color(27, 45, 74));
        IRLabel.setText("Interest rate (%)");
        getContentPane().add(IRLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, -1, -1));

        compoundLabel.setFont(getFont());
        compoundLabel.setForeground(new java.awt.Color(27, 45, 74));
        compoundLabel.setText("Compound");
        getContentPane().add(compoundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, -1, -1));

        investLenLabel.setFont(getFont());
        investLenLabel.setForeground(new java.awt.Color(27, 45, 74));
        investLenLabel.setText("Investment length");
        getContentPane().add(investLenLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 420, -1, -1));

        calcButton.setBackground(new java.awt.Color(158, 191, 183));
        calcButton.setFont(getFont());
        calcButton.setForeground(new java.awt.Color(27, 45, 74));
        calcButton.setText("Calculate");
        calcButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });
        getContentPane().add(calcButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 470, -1, -1));

        clearButton.setFont(getFont());
        clearButton.setForeground(new java.awt.Color(27, 45, 74));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 470, -1, -1));

        midLabel1.setFont(getFont());
        midLabel1.setForeground(new java.awt.Color(27, 45, 74));
        midLabel1.setText("Contribute at the");
        getContentPane().add(midLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, -1, -1));

        midLebel2.setFont(getFont());
        midLebel2.setForeground(new java.awt.Color(27, 45, 74));
        midLebel2.setText("of each compounding period");
        getContentPane().add(midLebel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, -1, -1));

        closeButton.setFont(getFont());
        closeButton.setForeground(new java.awt.Color(27, 45, 74));
        closeButton.setText("Return");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 10, -1, -1));

        resultsLabel.setBackground(new java.awt.Color(27, 45, 74));
        resultsLabel.setFont(new java.awt.Font("Nunito", 1, 36)); // NOI18N
        resultsLabel.setForeground(new java.awt.Color(27, 45, 74));
        resultsLabel.setText("Results");
        getContentPane().add(resultsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 120, 352, -1));

        endBalanceLabel.setFont(new java.awt.Font("Nunito", 1, 18)); // NOI18N
        endBalanceLabel.setForeground(new java.awt.Color(27, 45, 74));
        endBalanceLabel.setText("Ending balance");
        getContentPane().add(endBalanceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 190, -1, -1));

        totalPrinLabel.setFont(getFont());
        totalPrinLabel.setForeground(new java.awt.Color(27, 45, 74));
        totalPrinLabel.setText("Total principal");
        getContentPane().add(totalPrinLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 230, -1, -1));

        totalContrLabel.setFont(getFont());
        totalContrLabel.setForeground(new java.awt.Color(27, 45, 74));
        totalContrLabel.setText("Total contributions");
        getContentPane().add(totalContrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 270, -1, -1));

        totalInterestLabel.setFont(new java.awt.Font("Nunito", 1, 18)); // NOI18N
        totalInterestLabel.setForeground(new java.awt.Color(27, 45, 74));
        totalInterestLabel.setText("Total interest");
        getContentPane().add(totalInterestLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 310, -1, -1));

        interestOfInitLabel.setFont(getFont());
        interestOfInitLabel.setForeground(new java.awt.Color(27, 45, 74));
        interestOfInitLabel.setText("Interest of initial investment");
        getContentPane().add(interestOfInitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 350, -1, -1));

        interestOfContrLabel.setFont(getFont());
        interestOfContrLabel.setForeground(new java.awt.Color(27, 45, 74));
        interestOfContrLabel.setText("Interest of the contributions");
        getContentPane().add(interestOfContrLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 390, -1, -1));

        initInvestField.setFont(getFont());
        initInvestField.setForeground(new java.awt.Color(27, 45, 74));
        initInvestField.setText("20000");
        initInvestField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                initInvestFieldFocusLost(evt);
            }
        });
        initInvestField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                initInvestFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                initInvestFieldKeyReleased(evt);
            }
        });
        getContentPane().add(initInvestField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 142, -1));

        annualContrField.setFont(getFont());
        annualContrField.setForeground(new java.awt.Color(27, 45, 74));
        annualContrField.setText("500");
        annualContrField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                annualContrFieldFocusLost(evt);
            }
        });
        annualContrField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                annualContrFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                annualContrFieldKeyReleased(evt);
            }
        });
        getContentPane().add(annualContrField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, 142, -1));

        monthlyContrField.setFont(getFont());
        monthlyContrField.setForeground(new java.awt.Color(27, 45, 74));
        monthlyContrField.setText("0");
        monthlyContrField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                monthlyContrFieldFocusLost(evt);
            }
        });
        monthlyContrField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                monthlyContrFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                monthlyContrFieldKeyReleased(evt);
            }
        });
        getContentPane().add(monthlyContrField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 220, 142, -1));

        IRField.setFont(getFont());
        IRField.setForeground(new java.awt.Color(27, 45, 74));
        IRField.setText("5");
        IRField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                IRFieldFocusLost(evt);
            }
        });
        IRField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IRFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                IRFieldKeyReleased(evt);
            }
        });
        getContentPane().add(IRField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, 142, -1));

        investLenYField.setFont(getFont());
        investLenYField.setForeground(new java.awt.Color(27, 45, 74));
        investLenYField.setText("10");
        investLenYField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                investLenYFieldFocusLost(evt);
            }
        });
        investLenYField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                investLenYFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                investLenYFieldKeyReleased(evt);
            }
        });
        getContentPane().add(investLenYField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 41, -1));

        investLenMField.setFont(getFont());
        investLenMField.setForeground(new java.awt.Color(27, 45, 74));
        investLenMField.setText("6");
        investLenMField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                investLenMFieldFocusLost(evt);
            }
        });
        investLenMField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                investLenMFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                investLenMFieldKeyReleased(evt);
            }
        });
        getContentPane().add(investLenMField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 420, 36, -1));

        yearsLabel.setFont(getFont());
        yearsLabel.setForeground(new java.awt.Color(27, 45, 74));
        yearsLabel.setText("years");
        getContentPane().add(yearsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 420, -1, -1));

        monthsLabel.setFont(getFont());
        monthsLabel.setForeground(new java.awt.Color(27, 45, 74));
        monthsLabel.setText("months");
        getContentPane().add(monthsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 420, -1, -1));

        compoundBox.setFont(getFont());
        compoundBox.setForeground(new java.awt.Color(27, 45, 74));
        compoundBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "annually", "semiannually", "quarterly", "monthly", "semimonthly", "biweekly", "weekly", "daily", "continuously" }));
        getContentPane().add(compoundBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 380, -1, -1));

        endBalanceLabel1.setFont(new java.awt.Font("Nunito", 1, 18)); // NOI18N
        endBalanceLabel1.setForeground(new java.awt.Color(27, 45, 74));
        endBalanceLabel1.setText("$40,408.17");
        getContentPane().add(endBalanceLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 190, -1, -1));

        totalPrinLabel1.setFont(getFont());
        totalPrinLabel1.setForeground(new java.awt.Color(27, 45, 74));
        totalPrinLabel1.setText("$25,500.00");
        getContentPane().add(totalPrinLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 230, -1, -1));

        totalContrLabel1.setFont(getFont());
        totalContrLabel1.setForeground(new java.awt.Color(27, 45, 74));
        totalContrLabel1.setText("$5,500.00");
        getContentPane().add(totalContrLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 270, -1, -1));

        totalInterestLabel1.setFont(new java.awt.Font("Nunito", 1, 18)); // NOI18N
        totalInterestLabel1.setForeground(new java.awt.Color(27, 45, 74));
        totalInterestLabel1.setText("$14,908.17");
        getContentPane().add(totalInterestLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 310, -1, -1));

        interestOfInitLabel1.setFont(getFont());
        interestOfInitLabel1.setForeground(new java.awt.Color(27, 45, 74));
        interestOfInitLabel1.setText("$13,382.41");
        getContentPane().add(interestOfInitLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 350, -1, -1));

        interestOfContrLabel1.setFont(getFont());
        interestOfContrLabel1.setForeground(new java.awt.Color(27, 45, 74));
        interestOfContrLabel1.setText("$1,525.76");
        getContentPane().add(interestOfContrLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 390, -1, -1));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/InterestRateBkg.png"))); // NOI18N
        jLabel1.setFocusable(false);
        jLabel1.setRequestFocusEnabled(false);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 700));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void myInitComponents() {
        getContentPane().setBackground(new java.awt.Color(10, 55, 78));
        setResizable(false);
        
        //setExtendedState(InterestCalculator.MAXIMIZED_BOTH);
        
        //scaleImage();
        
    }
    
    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        // function is the "calculator" part
        double ii = Double.parseDouble(initInvestField.getText().replaceAll(",", ""));
        double ac = Double.parseDouble(annualContrField.getText().replaceAll(",", ""));
        double mc = Double.parseDouble(monthlyContrField.getText().replaceAll(",", ""));
        double ir = Double.parseDouble(IRField.getText().replaceAll(",", ""));
        double ilY = Double.parseDouble(investLenYField.getText().replaceAll(",", ""));
        double ilM = Double.parseDouble(investLenMField.getText().replaceAll(",", "").strip());
        
        
        int cb = determineCompound();
        double interestOfInitVar = calcIntInit(cb, ii, ir, ilY, ilM);
        
        double totalContrVar = (ac * ilY) + (mc * ilY * 12) +  (mc * ilM);
        if (ilM > 0){
            totalContrVar += ac;
        }
        double totalPrinVar = ii + totalContrVar;
        double endBalanceVar = calcEndBalance(cb, ii, ir, ilY, ilM, ac, mc);
        double totalInterestVar = endBalanceVar - totalPrinVar;
        double interestOfContrVar = calcEndBalance(cb, 0, ir, ilY, ilM, ac, mc) - totalPrinVar + ii ;
        
        setResultsLabelsVisible();
        
        totalPrinLabel1.setText("$" + String.format("%,.2f", totalPrinVar));
        totalContrLabel1.setText("$" + String.format("%,.2f", totalContrVar));
        totalInterestLabel1.setText("$" + String.format("%,.2f", totalInterestVar));
        interestOfInitLabel1.setText("$" + String.format("%,.2f", interestOfInitVar));
        interestOfContrLabel1.setText("$" + String.format("%,.2f", interestOfContrVar));
        endBalanceLabel1.setText("$" + String.format("%,.2f", endBalanceVar));
        
        if (endBalanceVar == 0) {
            endBalanceLabel1.setText("$" + String.format("%,.2f", totalPrinVar));
            totalInterestLabel1.setText("$0.00");
            interestOfContrLabel1.setText("$0.00");
        }
    }//GEN-LAST:event_calcButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        setResultsLabelsNotVisible();
        calcButton.setEnabled(false);
        initInvestField.setText("");
        annualContrField.setText("");
        monthlyContrField.setText("");
        IRField.setText("");
        investLenYField.setText("");
        investLenMField.setText("");
        buttonGroup1.clearSelection();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void initInvestFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_initInvestFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (initInvestField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(initInvestField.getText().replaceAll(",", "")))){
                    initInvestField.setText("");
                    initInvestField.requestFocus();
                    calcButton.setEnabled(false);
                    setResultsLabelsNotVisible();
  
                } 
               else {
                    annualContrField.requestFocus();
                    if (allFieldsHaveValue()) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_initInvestFieldKeyPressed

    private void initInvestFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_initInvestFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (initInvestField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(initInvestField.getText().replaceAll(",", "")))){
                initInvestField.setText("");
                initInvestField.requestFocus();
                calcButton.setEnabled(false);
                setResultsLabelsNotVisible();
            } 
            else {
                if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
            }
        } else{
            initInvestField.setText("0");
            if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
        }
    }//GEN-LAST:event_initInvestFieldFocusLost

    private void annualContrFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_annualContrFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (annualContrField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(annualContrField.getText().replaceAll(",", "")))){
                    annualContrField.setText("");
                    annualContrField.requestFocus();
                    calcButton.setEnabled(false);
                    setResultsLabelsNotVisible();
  
                } 
               else {
                    monthlyContrField.requestFocus();
                    if (allFieldsHaveValue()) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_annualContrFieldKeyPressed

    private void annualContrFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_annualContrFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (annualContrField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(annualContrField.getText().replaceAll(",", "")))){
                annualContrField.setText("");
                annualContrField.requestFocus();
                calcButton.setEnabled(false);
                setResultsLabelsNotVisible();
            } 
            else {
                if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
            }
        } else{
            annualContrField.setText("0");
            if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
        }
    }//GEN-LAST:event_annualContrFieldFocusLost

    private void monthlyContrFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_monthlyContrFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (monthlyContrField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(monthlyContrField.getText().replaceAll(",", "")))){
                    monthlyContrField.setText("");
                    monthlyContrField.requestFocus();
                    calcButton.setEnabled(false);
                    setResultsLabelsNotVisible();
  
                } 
               else {
                    IRField.requestFocus();
                    if (allFieldsHaveValue()) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_monthlyContrFieldKeyPressed

    private void monthlyContrFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthlyContrFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (monthlyContrField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(monthlyContrField.getText().replaceAll(",", "")))){
                monthlyContrField.setText("");
                monthlyContrField.requestFocus();
                calcButton.setEnabled(false);
                setResultsLabelsNotVisible();
            } 
            else {
                if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
            }
        } else{
            monthlyContrField.setText("0");
            if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
        }
    }//GEN-LAST:event_monthlyContrFieldFocusLost

    private void IRFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IRFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (IRField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(IRField.getText().replaceAll(",", "")))){
                    IRField.setText("");
                    IRField.requestFocus();
                    calcButton.setEnabled(false);
                    setResultsLabelsNotVisible();
  
                } 
               else {
                    investLenYField.requestFocus();
                    if (allFieldsHaveValue()) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_IRFieldKeyPressed

    private void IRFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IRFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (IRField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(IRField.getText().replaceAll(",", "")))){
                IRField.setText("");
                IRField.requestFocus();
                calcButton.setEnabled(false);
                setResultsLabelsNotVisible();
            } 
            else {
                if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
            }
        } else{
            IRField.setText("0");
            if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
        }
    }//GEN-LAST:event_IRFieldFocusLost

    private void investLenYFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_investLenYFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (investLenYField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(investLenYField.getText().replaceAll(",", "")))){
                    investLenYField.setText("");
                    investLenYField.requestFocus();
                    calcButton.setEnabled(false);
                    setResultsLabelsNotVisible();
  
                } 
               else {
                    investLenMField.requestFocus();
                    if (allFieldsHaveValue()) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_investLenYFieldKeyPressed

    private void investLenYFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_investLenYFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (investLenYField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(investLenYField.getText().replaceAll(",", "")))){
                investLenYField.setText("");
                investLenYField.requestFocus();
                calcButton.setEnabled(false);
                setResultsLabelsNotVisible();
            } 
            else {
                if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
            }
        } else{
            investLenYField.setText("0");
            if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
        }
    }//GEN-LAST:event_investLenYFieldFocusLost

    private void investLenMFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_investLenMFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (investLenMField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(investLenMField.getText().replaceAll(",", "")))){
                    investLenMField.setText("");
                    investLenMField.requestFocus();
                    calcButton.setEnabled(false);
                    setResultsLabelsNotVisible();
  
                } 
               else {
                    if (allFieldsHaveValue()) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_investLenMFieldKeyPressed

    private void investLenMFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_investLenMFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (investLenMField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(investLenMField.getText().replaceAll(",", "")))){
                investLenMField.setText("");
                investLenMField.requestFocus();
                calcButton.setEnabled(false);
                setResultsLabelsNotVisible();
            } 
            else {
                if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
            }
        } else{
            investLenMField.setText("0");
            if (allFieldsHaveValue()) {
                    calcButton.setEnabled(true);
                }
        }
    }//GEN-LAST:event_investLenMFieldFocusLost

    private void beginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginButtonActionPerformed
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_beginButtonActionPerformed

    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_endButtonActionPerformed

    private void initInvestFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_initInvestFieldKeyReleased
        // works but need to check if the input is a decimal, because this is only for 
        // integers as it formats with no decimal places
        
        //if (MainHelper.isValidNumber(initInvestField.getText().replaceAll(",", ""))){
        //    initInvestField.setText(String.format("%,.0f", 
        //            Double.parseDouble(initInvestField.getText().replaceAll(",", ""))));
        //}
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_initInvestFieldKeyReleased

    private void annualContrFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_annualContrFieldKeyReleased
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_annualContrFieldKeyReleased

    private void monthlyContrFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_monthlyContrFieldKeyReleased
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_monthlyContrFieldKeyReleased

    private void IRFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IRFieldKeyReleased
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_IRFieldKeyReleased

    private void investLenYFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_investLenYFieldKeyReleased
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_investLenYFieldKeyReleased

    private void investLenMFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_investLenMFieldKeyReleased
        if (allFieldsHaveValue()) {
            calcButton.setEnabled(true);
        }
    }//GEN-LAST:event_investLenMFieldKeyReleased

    private void setResultsLabelsNotVisible() {
        endBalanceLabel1.setVisible(false);
        totalPrinLabel1.setVisible(false);
        totalContrLabel1.setVisible(false);
        totalInterestLabel1.setVisible(false);
        interestOfInitLabel1.setVisible(false);
        interestOfContrLabel1.setVisible(false);
    }
    
    private void setResultsLabelsVisible() {
        endBalanceLabel1.setVisible(true);
        totalPrinLabel1.setVisible(true);
        totalContrLabel1.setVisible(true);
        totalInterestLabel1.setVisible(true);
        interestOfInitLabel1.setVisible(true);
        interestOfContrLabel1.setVisible(true);
        
    }
    
    private boolean allFieldsHaveValue() {
        int ii = initInvestField.getText().strip().compareTo("");
        int ac = annualContrField.getText().strip().compareTo("");
        int mc = monthlyContrField.getText().strip().compareTo("");
        int ir = IRField.getText().strip().compareTo("");
        int ilY = investLenYField.getText().strip().compareTo("");
        int ilM = investLenMField.getText().strip().compareTo("");
        return ii != 0 && ac != 0 && mc != 0 && ir != 0 && ilY != 0 && ilM != 0 
                && (beginButton.isSelected() || endButton.isSelected());
    }
    
    public int determineCompound(){
        if (compoundBox.getSelectedItem() == "annually"){
            return 1;
        }
        if (compoundBox.getSelectedItem() == "semiannually"){
            return 2;
        }
        if (compoundBox.getSelectedItem() == "quarterly"){
            return 4;
        }
        if (compoundBox.getSelectedItem() == "monthly"){
            return 12;
        }
        if (compoundBox.getSelectedItem() == "semimonthly"){
            return 24;
        }
        if (compoundBox.getSelectedItem() == "biweekly"){
            return 26;
        }
        if (compoundBox.getSelectedItem() == "weekly"){
            return 52;
        }
        if (compoundBox.getSelectedItem() == "daily"){
            return 365;
        }
        if (compoundBox.getSelectedItem() == "continuously"){
            return 0;
        }
        return 0;
    }
    
    public double calcIntInit(int cb, double ii, double ir, double ilY, double ilM){
        if (ir == 0){
            return 0;
        }
        double Y = ilY + (ilM / 12);
        double r = ir / 100;
        if (cb == 0){
            return (ii * Math.exp(Y * r)) - ii;
        } else {
            return (ii * Math.pow(1 + (r / cb), cb * Y )) - ii;
        }
    }
    
    public double calcEndBalance(int cb, double ii, double ir, double ilY, double ilM, double ac, double mc){
        if (ir == 0){
            return 0;
        }
        double Y = ilY + (ilM / 12);
        double r = ir / 100;
        double c = ac + (mc * 12);
        
        if (cb == 0){
            // i think it works now?!
            if (beginButton.isSelected()){
                return (ii * Math.exp(Y * r)) + (c / r) * (Math.exp(Y * r) 
                    - 1);
            } else {
                return (ii * Math.exp(Y * r)) + (c / r) * (Math.exp(Y * r) 
                    - Math.exp(r));
            }
            
        } else {
            // does work :D
            if (beginButton.isSelected()){
                return (ii * Math.pow(1 + (r / cb), cb * Y)) + c * 
                    (((Math.pow(1 + (r / cb), (cb * Y) + 1) - (1 + (r / cb))) / (r)));
                
            } else {
                return (ii * Math.pow(1 + (r / cb), cb * Y)) + c * 
                    (((Math.pow(1 + (r / cb), cb * Y) - 1) / (r)));
            }
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterestCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterestCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterestCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterestCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterestCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IRField;
    private javax.swing.JLabel IRLabel;
    private javax.swing.JTextField annualContrField;
    private javax.swing.JLabel annualContrLabel;
    private javax.swing.JRadioButton beginButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton calcButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox<String> compoundBox;
    private javax.swing.JLabel compoundLabel;
    private javax.swing.JLabel endBalanceLabel;
    private javax.swing.JLabel endBalanceLabel1;
    private javax.swing.JRadioButton endButton;
    private javax.swing.JTextField initInvestField;
    private javax.swing.JLabel initInvestLabel;
    private javax.swing.JLabel interestOfContrLabel;
    private javax.swing.JLabel interestOfContrLabel1;
    private javax.swing.JLabel interestOfInitLabel;
    private javax.swing.JLabel interestOfInitLabel1;
    private javax.swing.JLabel investLenLabel;
    private javax.swing.JTextField investLenMField;
    private javax.swing.JTextField investLenYField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JLabel midLabel1;
    private javax.swing.JLabel midLebel2;
    private javax.swing.JTextField monthlyContrField;
    private javax.swing.JLabel monthlyContrLabel;
    private javax.swing.JLabel monthsLabel;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JLabel totalContrLabel;
    private javax.swing.JLabel totalContrLabel1;
    private javax.swing.JLabel totalInterestLabel;
    private javax.swing.JLabel totalInterestLabel1;
    private javax.swing.JLabel totalPrinLabel;
    private javax.swing.JLabel totalPrinLabel1;
    private javax.swing.JLabel yearsLabel;
    // End of variables declaration//GEN-END:variables
}
