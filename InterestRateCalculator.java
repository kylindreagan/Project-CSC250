/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Alyssa
 */
public class InterestRateCalculator extends javax.swing.JFrame {

    /**
     * Creates new form InterestRateCalculator
     */
    public InterestRateCalculator() {
        initComponents();
        calcButton.setEnabled(false);
        resultsLabel.setVisible(false);
        IRLabel.setVisible(false);
        totalMPLabel.setVisible(false);
        totalInterestLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LALabel = new javax.swing.JLabel();
        LTLabel = new javax.swing.JLabel();
        MPLabel = new javax.swing.JLabel();
        LAField = new javax.swing.JTextField();
        LTFieldYears = new javax.swing.JTextField();
        LTFieldMonths = new javax.swing.JTextField();
        MPField = new javax.swing.JTextField();
        calcButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        mainLabel = new javax.swing.JLabel();
        resultsLabel = new javax.swing.JLabel();
        IRLabel = new javax.swing.JLabel();
        totalMPLabel = new javax.swing.JLabel();
        totalInterestLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LALabel.setText("Loan Amount");

        LTLabel.setText("Loan Term");

        MPLabel.setText("Monthly Payment");

        LAField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                LAFieldFocusLost(evt);
            }
        });
        LAField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LAFieldKeyPressed(evt);
            }
        });

        LTFieldYears.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                LTFieldYearsFocusLost(evt);
            }
        });
        LTFieldYears.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LTFieldYearsKeyPressed(evt);
            }
        });

        LTFieldMonths.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                LTFieldMonthsFocusLost(evt);
            }
        });
        LTFieldMonths.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LTFieldMonthsKeyPressed(evt);
            }
        });

        MPField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                MPFieldFocusLost(evt);
            }
        });
        MPField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MPFieldKeyPressed(evt);
            }
        });

        calcButton.setText("Calculate");
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        mainLabel.setText("Interest Rate Claculator");

        resultsLabel.setText("Results");

        IRLabel.setText("Interest rate !!!this formula not done");

        totalMPLabel.setText("Total of -- monthly payments");

        totalInterestLabel.setText("Total interest paid");

        jLabel1.setText("years");
        jLabel1.setName("n"); // NOI18N

        jLabel2.setText("months");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(calcButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MPLabel)
                    .addComponent(LALabel)
                    .addComponent(LTLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(LAField, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                        .addComponent(MPField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LTFieldYears, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LTFieldMonths, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IRLabel)
                    .addComponent(resultsLabel)
                    .addComponent(totalMPLabel)
                    .addComponent(totalInterestLabel))
                .addGap(87, 87, 87))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(mainLabel))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resultsLabel)
                        .addGap(18, 18, 18)
                        .addComponent(IRLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalMPLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalInterestLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LALabel)
                            .addComponent(LAField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LTFieldYears, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LTFieldMonths, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LTLabel)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MPLabel)
                            .addComponent(MPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(calcButton)
                            .addComponent(clearButton))
                        .addGap(95, 95, 95))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        // whole function is the "calculator" part
        float la = Float.parseFloat(LAField.getText());
        float ltY = Float.parseFloat(LTFieldYears.getText());
        float ltM = Float.parseFloat(LTFieldMonths.getText());
        float mp = Float.parseFloat(MPField.getText());
        
        ltM += ltY * 12;
        
        float totalMP = ltM * mp;
        float totalInterest = (ltM * mp) - la;
        // havn't been able to get this formula right
        float interestRate = (totalInterest/ (la * ltM * 12)) * 100;
        
        
        resultsLabel.setVisible(true);
        IRLabel.setText("Interest rate " + String.format("%,.3f", interestRate) + "%");
        IRLabel.setVisible(true);
        totalInterestLabel.setText("Total Interest $" 
                + String.format("%,.2f", totalInterest));
        totalInterestLabel.setVisible(true);
        totalMPLabel.setText("Total of " + String.format("%,.0f", ltM) + 
                " monthly payments $" + String.format("%,.2f", totalMP));
        totalMPLabel.setVisible(true);
    }//GEN-LAST:event_calcButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // clears all values from all input boxes
        LAField.setText("");
        LAField.requestFocus();
        LTFieldYears.setText("");
        LTFieldMonths.setText("");
        MPField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void LAFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LAFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (LAField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(LAField.getText()))){
                    LAField.setText("");
                    LAField.requestFocus();
                    calcButton.setEnabled(false);
                    resultsLabel.setVisible(false);
                    IRLabel.setVisible(false);
                    totalMPLabel.setVisible(false);
                    totalInterestLabel.setVisible(false);
                } 
               else {
                    if (LAField.getText().strip().compareTo("") == 0){
                    LTFieldYears.requestFocus();
                    }
                   int ltY = LTFieldYears.getText().strip().compareTo("");
                   int ltM = LTFieldMonths.getText().strip().compareTo("");
                   int mp = MPField.getText().strip().compareTo("");
                   if (ltY != 0 && ltM != 0 && mp != 0) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_LAFieldKeyPressed

    private void LAFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LAFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (LAField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(LAField.getText()))){
                LAField.setText("");
                LAField.requestFocus();
                calcButton.setEnabled(false);
                resultsLabel.setVisible(false);
                IRLabel.setVisible(false);
                totalMPLabel.setVisible(false);
                totalInterestLabel.setVisible(false);
            } 
            else {
                if (LAField.getText().strip().compareTo("") == 0){
                    LTFieldYears.requestFocus();
                }
                int ltY = LTFieldYears.getText().strip().compareTo("");
                int ltM = LTFieldMonths.getText().strip().compareTo("");
                int mp = MPField.getText().strip().compareTo("");
                if (ltY != 0 && ltM != 0 && mp != 0) {
                    calcButton.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_LAFieldFocusLost

    private void LTFieldYearsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LTFieldYearsKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (LTFieldYears.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(LTFieldYears.getText()))){
                    LTFieldYears.setText("");
                    LTFieldYears.requestFocus();
                    calcButton.setEnabled(false);
                    resultsLabel.setVisible(false);
                    IRLabel.setVisible(false);
                    totalMPLabel.setVisible(false);
                    totalInterestLabel.setVisible(false);
                } 
               else {
                    if (LTFieldYears.getText().strip().compareTo("") == 0){
                    LTFieldMonths.requestFocus();
                    }
                   int la = LAField.getText().strip().compareTo("");
                   int ltM = LTFieldMonths.getText().strip().compareTo("");
                   int mp = MPField.getText().strip().compareTo("");
                   if (la != 0 && ltM != 0 && mp != 0) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_LTFieldYearsKeyPressed

    private void LTFieldYearsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LTFieldYearsFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (LTFieldYears.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(LTFieldYears.getText()))){
                LTFieldYears.setText("");
                LTFieldYears.requestFocus();
                calcButton.setEnabled(false);
                resultsLabel.setVisible(false);
                IRLabel.setVisible(false);
                totalMPLabel.setVisible(false);
                totalInterestLabel.setVisible(false);
            } 
            else {
                if (LTFieldYears.getText().strip().compareTo("") == 0){
                    LTFieldMonths.requestFocus();
                }
                int la = LAField.getText().strip().compareTo("");
                int ltM = LTFieldMonths.getText().strip().compareTo("");
                int mp = MPField.getText().strip().compareTo("");
                if (la != 0 && ltM != 0 && mp != 0) {
                    calcButton.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_LTFieldYearsFocusLost

    private void LTFieldMonthsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LTFieldMonthsKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (LTFieldMonths.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(LTFieldMonths.getText()))){
                    LTFieldMonths.setText("");
                    LTFieldMonths.requestFocus();
                    calcButton.setEnabled(false);
                    resultsLabel.setVisible(false);
                    IRLabel.setVisible(false);
                    totalMPLabel.setVisible(false);
                    totalInterestLabel.setVisible(false);
                } 
               else {
                    if (LTFieldMonths.getText().strip().compareTo("") == 0){
                    MPField.requestFocus();
                    }
                   int la = LAField.getText().strip().compareTo("");
                   int ltY = LTFieldYears.getText().strip().compareTo("");
                   int mp = MPField.getText().strip().compareTo("");
                   if (la != 0 && ltY != 0 && mp != 0) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_LTFieldMonthsKeyPressed

    private void LTFieldMonthsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_LTFieldMonthsFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (LTFieldMonths.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(LTFieldMonths.getText()))){
                LTFieldMonths.setText("");
                LTFieldMonths.requestFocus();
                calcButton.setEnabled(false);
                resultsLabel.setVisible(false);
                IRLabel.setVisible(false);
                totalMPLabel.setVisible(false);
                totalInterestLabel.setVisible(false);
            } 
            else {
                if (LTFieldMonths.getText().strip().compareTo("") == 0){
                    MPField.requestFocus();
                }
                int la = LAField.getText().strip().compareTo("");
                int ltY = LTFieldYears.getText().strip().compareTo("");
                int mp = MPField.getText().strip().compareTo("");
                if (la != 0 && ltY != 0 && mp != 0) {
                    calcButton.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_LTFieldMonthsFocusLost

    private void MPFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MPFieldKeyPressed
        // if "enter" key pressed, check if input is valid
        // if all fields have an input, enable calcButton
        if (evt.getKeyCode() == 10) {
            if (MPField.getText().strip().compareTo("") != 0) {
               if (! (MainHelper.isValidNumber(MPField.getText()))){
                    MPField.setText("");
                    MPField.requestFocus();
                    calcButton.setEnabled(false);
                    resultsLabel.setVisible(false);
                    IRLabel.setVisible(false);
                    totalMPLabel.setVisible(false);
                    totalInterestLabel.setVisible(false);
                } 
               else {
                   int la = LAField.getText().strip().compareTo("");
                   int ltY = LTFieldYears.getText().strip().compareTo("");
                   int ltM = LTFieldMonths.getText().strip().compareTo("");
                   if (la != 0 && ltY != 0 && ltM != 0) {
                       calcButton.setEnabled(true);
                    }
               }
            }
        }
    }//GEN-LAST:event_MPFieldKeyPressed

    private void MPFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MPFieldFocusLost
        // checks for valid input
        // if all fields have an input, enable calcButton
        if (MPField.getText().strip().compareTo("") != 0) {
            if (! (MainHelper.isValidNumber(MPField.getText()))){
                MPField.setText("");
                MPField.requestFocus();
                calcButton.setEnabled(false);
                resultsLabel.setVisible(false);
                IRLabel.setVisible(false);
                totalMPLabel.setVisible(false);
                totalInterestLabel.setVisible(false);
            } 
            else {
                int la = LAField.getText().strip().compareTo("");
                int ltY = LTFieldYears.getText().strip().compareTo("");
                int ltM = LTFieldMonths.getText().strip().compareTo("");
                if (la != 0 && ltY != 0 && ltM != 0) {
                    calcButton.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_MPFieldFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterestRateCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterestRateCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterestRateCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterestRateCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterestRateCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IRLabel;
    private javax.swing.JTextField LAField;
    private javax.swing.JLabel LALabel;
    private javax.swing.JTextField LTFieldMonths;
    private javax.swing.JTextField LTFieldYears;
    private javax.swing.JLabel LTLabel;
    private javax.swing.JTextField MPField;
    private javax.swing.JLabel MPLabel;
    private javax.swing.JButton calcButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JLabel totalInterestLabel;
    private javax.swing.JLabel totalMPLabel;
    // End of variables declaration//GEN-END:variables
}
